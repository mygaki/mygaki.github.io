<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kubernetes学习笔记</title>
      <link href="2021/06/05/kubernetes/"/>
      <url>2021/06/05/kubernetes/</url>
      
        <content type="html"><![CDATA[<h1 id="kubernetes"><a href="#kubernetes" class="headerlink" title="# kubernetes"></a># kubernetes</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>kubernetes 简称K8S，其中8代表了”ubernete”的8个字符，是一个开源的自动化容器编排引擎</p><ul><li><p>是谷歌在2014年开源的容器化集群管理系统（go语音开发的）</p></li><li><p>使用K8S进行容器化应用部署</p></li><li><p>使用K8S利于应用扩展</p></li><li><p>K8S目标实施让部署容器化更加简洁和高效</p></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><p>自动装箱（自动部署）</p></li><li><p>自动修复（自愈能力，监控检查）</p></li><li><p>水平扩展</p></li><li><p>服务发现（负载均衡）</p></li><li><p>滚动更新</p></li><li><p>版本回退</p></li><li><p>密钥和配置管理</p></li><li><p>存储编排</p></li><li><p>批处理（一次性和定时任务）</p></li></ul><h2 id="K8S集群架构组件"><a href="#K8S集群架构组件" class="headerlink" title="K8S集群架构组件"></a>K8S集群架构组件</h2><p><img src="https://mygaki.github.io/img/image-20210606232443179.png" alt="image-20210606232443179"></p><p>Master(主控节点) 和 worker node(工作节点)</p><ol><li><p>master组件（集群控制节点，对集群进行调度管理，接收集群外用户对集群的操作请求）</p><ul><li>ApiServer<ul><li>集群统一入口，以restful方式，交给<strong>etcd</strong>[^1]存储</li></ul></li><li>scheduler<ul><li>节点调度，选择node节点应用部署</li></ul></li><li>controller-manager<ul><li>处理集群中常见后台任务，一个资源对应一个控制器</li></ul></li><li>etcd<ul><li>存储系统，保存集群相关数据</li></ul></li></ul></li><li><p>worker node</p><ul><li>kubelet<ul><li>类比master派给node节点的代表，负责管理节点中的容器</li></ul></li><li>kube-proxy<ul><li>提供网络代理，实现负载均衡等操作</li></ul></li><li>pod(Container Runtime)</li></ul></li></ol><h2 id="K8S核心概念"><a href="#K8S核心概念" class="headerlink" title="K8S核心概念"></a>K8S核心概念</h2><ol><li><p>Pod</p><ul><li>最小组成单元</li><li>一组容器的集合</li><li>共享网络</li><li>生命周期是短暂的</li></ul></li><li><p>Controller</p><ul><li>确保预期的Pod的副本数量</li><li>无状态和有状态应用部署</li><li>确保所有的node运行同一个Pod</li><li>一次性任务和定时任务 </li></ul></li><li><p>Service</p><ul><li>定义一组Pod的访问规则</li></ul></li></ol><blockquote><p>由Serivce对外创建访问规则，由Controller创建Pod并运行</p></blockquote><h2 id="搭建K8S环境平台规划"><a href="#搭建K8S环境平台规划" class="headerlink" title="搭建K8S环境平台规划"></a>搭建K8S环境平台规划</h2><ul><li>单master集群部署</li><li>多master集群部署</li></ul><p>部署kubunetes集群有多种方式：</p><ol><li>minikube</li></ol><p>[^1]: <em>etcd</em> 是一个高可用的 Key/Value 存储系统，主要用于分享配置和服务发现</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记</title>
      <link href="2021/06/05/docker/"/>
      <url>2021/06/05/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Docker 是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669">开源</a>的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的<a href="https://baike.baidu.com/item/%E9%95%9C%E5%83%8F/1574">镜像</a>中，然后发布到任何流行的 <a href="https://baike.baidu.com/item/Linux">Linux</a>或<a href="https://baike.baidu.com/item/Windows/165458">Windows</a> 机器上，也可以实现<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8C%96/547949">虚拟化</a>。容器是完全使用<a href="https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318">沙箱</a>机制，相互之间不会有任何接口</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyqt5学习笔记</title>
      <link href="2021/06/05/pyqt5/"/>
      <url>2021/06/05/pyqt5/</url>
      
        <content type="html"><![CDATA[<h1 id="pyQt5"><a href="#pyQt5" class="headerlink" title="pyQt5"></a>pyQt5</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>基于python的QT开发工具，移植性强，包含QT几乎所有的功能</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindow<span class="token keyword">from</span> ItemCheck_UI <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">,</span> Ui_MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyWindow<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">GetItem</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"This is a Example"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    myWin <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    myWin<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>myWin<span class="token punctuation">.</span>GetItem<span class="token punctuation">)</span>    myWin<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyqt </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
