<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kubernetes学习笔记</title>
      <link href="2021/06/05/kubernetes/"/>
      <url>2021/06/05/kubernetes/</url>
      
        <content type="html"><![CDATA[<h1 id="kubernetes"><a href="#kubernetes" class="headerlink" title="# kubernetes"></a># kubernetes</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>kubernetes 简称K8S，其中8代表了”ubernete”的8个字符，是一个开源的自动化容器编排引擎</p><ul><li><p>是谷歌在2014年开源的容器化集群管理系统（go语音开发的）</p></li><li><p>使用K8S进行容器化应用部署</p></li><li><p>使用K8S利于应用扩展</p></li><li><p>K8S目标实施让部署容器化更加简洁和高效</p></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><p>自动装箱（自动部署）</p></li><li><p>自动修复（自愈能力，监控检查）</p></li><li><p>水平扩展</p></li><li><p>服务发现（负载均衡）</p></li><li><p>滚动更新</p></li><li><p>版本回退</p></li><li><p>密钥和配置管理</p></li><li><p>存储编排</p></li><li><p>批处理（一次性和定时任务）</p></li></ul><h2 id="K8S集群架构组件"><a href="#K8S集群架构组件" class="headerlink" title="K8S集群架构组件"></a>K8S集群架构组件</h2><p><img src="https://mygaki.github.io/img/image-20210606232443179.png" alt="image-20210606232443179"></p><p>Master(主控节点) 和 worker node(工作节点)</p><ol><li><p>master组件（集群控制节点，对集群进行调度管理，接收集群外用户对集群的操作请求）</p><ul><li>ApiServer<ul><li>集群统一入口，以restful方式，交给<strong>etcd</strong>[^1]存储</li></ul></li><li>scheduler<ul><li>节点调度，选择node节点应用部署</li></ul></li><li>controller-manager<ul><li>处理集群中常见后台任务，一个资源对应一个控制器</li></ul></li><li>etcd<ul><li>存储系统，保存集群相关数据</li></ul></li></ul></li><li><p>worker node</p><ul><li>kubelet<ul><li>类比master派给node节点的代表，负责管理节点中的容器</li></ul></li><li>kube-proxy<ul><li>提供网络代理，实现负载均衡等操作</li></ul></li><li>pod(Container Runtime)</li></ul></li></ol><h2 id="K8S核心概念"><a href="#K8S核心概念" class="headerlink" title="K8S核心概念"></a>K8S核心概念</h2><ol><li><p>Pod</p><ul><li>最小组成单元</li><li>一组容器的集合</li><li>共享网络</li><li>生命周期是短暂的</li></ul></li><li><p>Controller</p><ul><li>确保预期的Pod的副本数量</li><li>无状态和有状态应用部署</li><li>确保所有的node运行同一个Pod</li><li>一次性任务和定时任务 </li></ul></li><li><p>Service</p><ul><li>定义一组Pod的访问规则</li></ul></li></ol><blockquote><p>由Serivce对外创建访问规则，由Controller创建Pod并运行</p></blockquote><h2 id="搭建K8S环境平台规划"><a href="#搭建K8S环境平台规划" class="headerlink" title="搭建K8S环境平台规划"></a>搭建K8S环境平台规划</h2><ul><li>单master集群部署</li><li>多master集群部署 ( 实现高可用 )</li></ul><p>部署kubunetes集群主要有两种方式：</p><ol><li>kubeadm<ul><li>kubeadm是一个K8S部署工具，提供kubeadm init和kubeadm join,用于快速部署kubernetes集群</li></ul></li><li>二进制包<ul><li>从github下载发行版的二进制包，手动部署每个组件，组成kubenetes集群。</li></ul></li></ol><p>kubeadm降低部署门槛，但屏蔽了很多细节，遇到问题很难排查。如果想更容易可控，推荐使用二进制包部署，虽然麻烦点，但可以学习很多工作原理，也利于后期维护</p><h2 id="Kubernetes-部署环境要求"><a href="#Kubernetes-部署环境要求" class="headerlink" title="Kubernetes 部署环境要求"></a>Kubernetes 部署环境要求</h2><ol><li><p>一台或多台机器，操作系统CentOS 7.x-86_x64</p></li><li><p>硬件配置：内存2G或者2G+, CPU 2核或CPU 2核+</p></li><li><p>集群内各个机器之间能相互通信</p></li><li><p>集群内各个机器可以访问外网，需要拉取镜像（非必需）</p></li><li><p>禁止swap分区（swap，这个当内存不足时，linux会自动使用swap，将部分内存数据存放到磁盘中，这个这样会使性能下降，为了性能考虑推荐关掉）</p></li></ol><h2 id="使用kubeadm部署kebunetes"><a href="#使用kubeadm部署kebunetes" class="headerlink" title="使用kubeadm部署kebunetes"></a>使用kubeadm部署kebunetes</h2><ol><li>创建一个Master节点<ul><li>kubeadmin init</li></ul></li><li>将Node节点加入到Master集群中<ul><li>kubeadm join &lt;Master节点的IP和端口&gt;</li></ul></li></ol><p>关闭防火墙： </p><pre class=" language-shell"><code class="language-shell">systemctl stop firewalldsystemctl disable firewalld</code></pre><p>关闭selinux</p><pre class=" language-shell"><code class="language-shell">sed -i 's/enforcing/disabled/' /etc/selinux/config   #永久setenforce 0 #临时</code></pre><p>关闭swap</p><pre class=" language-shell"><code class="language-shell">sed -ri 's/.*swap.*/#&/' /etc/fstab  #永久swapoff -a  #临时</code></pre><p>在 master添加hosts</p><pre class=" language-shell"><code class="language-shell">cat >> /etc/hosts << EOF10.0.0.17 k8smaster10.0.0.18 k8snodeEOF</code></pre><p>设置网桥参数</p><pre class=" language-shell"><code class="language-shell">cat > /etc/sysctl.d/k8s.conf << EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsysctl --system #生效</code></pre><p>时间同步</p><pre class=" language-shell"><code class="language-shell">yum install ntpdate -yntpdate time.windows.com</code></pre><p>安装Docker</p><pre class=" language-shell"><code class="language-shell"># 更新docker的yum源yum update     # 卸载旧版本(如果安装过旧版本的话)yum remove docker  docker-common docker-selinux docker-engine  # 安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的yum install -y yum-utils device-mapper-persistent-data lvm2# 设置yum源yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo# 可以查看所有仓库中所有docker版本，并选择特定版本安装yum list docker-ce --showduplicates | sort -r# 安装Docker，命令：yum install docker-ce-版本号，我选的是17.12.1.ceyum install docker-ce-17.12.1.ce# 启动Docker，命令：systemctl start docker，然后加入开机启动systemctl start dockersystemctl enable docker# 验证安装是否成功(有client和service两部分表示docker安装启动都成功了)docker version # 配置加速器修改/etc/docker/daemon.json&#123;  "registry-mirrors": ["https://registry.docker-cn.com"]&#125;然后执行：systemctl restart  docker</code></pre><p>安装kubeadm、kebulet、kebuctl</p><pre class=" language-shell"><code class="language-shell"># 添加k8s的阿里云的yum源cat > /etc/yum.repos.d/kubernetes.repo  << EOF[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF# 安装kubeadm, kubelet和kubectlyum install kubelet-1.19.4 kubeadm-1.19.4 kebectl-1.19.4 -yPS: 如果报错：nicodeDecodeError: 'ascii' codec can't decode byte 0xbc in position 3746:则在 /usr/share/yum-cli/yummain.py中加入三行：import sysreload(sys)sys.setdefaultencoding('gbk')systemctl enable kubelet# 查看是否安装完成yum list installed | grep kubeletyum list installed | grep kubeadmyum list installed | grep kubectl</code></pre><p>查看版本： kubelet –version<br>kubelet : 运行在cluster所有节点上，负责启动POD和容器<br>kubeadm: 用于初始化cluster<br>kubectl: kebunetes命令行工具，通过kubectl可以部署和管理应用，查看各种资源，创建，删除和更新组件 </p><p>部署Kubenetes Master节点， 在Master节点执行</p><pre class=" language-shell"><code class="language-shell">kubeadm init \--apiserver-advertise-address=10.0.0.17 \--image-repository registry.aliyuncs.com/google_containers \--kubernetes-version v1.19.4 \--service-cidr=10.96.0.0/12 \--pod-network-cidr=10.244.0.0/16mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config# 查看是否部署完成kubectl get nodes</code></pre><p>node节点加入Kubenetes Master, 在Worker Node上执行</p><pre class=" language-shell"><code class="language-shell">kubeadm join 10.0.0.17:6443 --token pgq9f2.0tz4s8r75htia14q \    --discovery-token-ca-cert-hash sha256:dc5b08cb66dfaa87bdcc9d577ae0bb997cfcc1a0712d5e654c4befe6cb488881</code></pre><p>安装网络插件</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f ./kube-flannel.yml  # 在master上查看是否部署完成, 稍等一会，检查是否变为Readykubectl get nodes</code></pre><p>[^1]: <em>etcd</em> 是一个高可用的 Key/Value 存储系统，主要用于分享配置和服务发现</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记</title>
      <link href="2021/06/05/docker/"/>
      <url>2021/06/05/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Docker 是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669">开源</a>的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的<a href="https://baike.baidu.com/item/%E9%95%9C%E5%83%8F/1574">镜像</a>中，然后发布到任何流行的 <a href="https://baike.baidu.com/item/Linux">Linux</a>或<a href="https://baike.baidu.com/item/Windows/165458">Windows</a> 机器上，也可以实现<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8C%96/547949">虚拟化</a>。容器是完全使用<a href="https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318">沙箱</a>机制，相互之间不会有任何接口</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyqt5学习笔记</title>
      <link href="2021/06/05/pyqt5/"/>
      <url>2021/06/05/pyqt5/</url>
      
        <content type="html"><![CDATA[<h1 id="pyQt5"><a href="#pyQt5" class="headerlink" title="pyQt5"></a>pyQt5</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>基于python的QT开发工具，移植性强，包含QT几乎所有的功能</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindow<span class="token keyword">from</span> ItemCheck_UI <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">,</span> Ui_MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyWindow<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">GetItem</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"This is a Example"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    myWin <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    myWin<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>myWin<span class="token punctuation">.</span>GetItem<span class="token punctuation">)</span>    myWin<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyqt </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
